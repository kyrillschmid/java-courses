// j2 from 'macros.j2' import header
// {{ header("The Class Object", "The Class Object") }}

// %% [markdown] lang="en" tags=["slide"]
// ## Being a Descendent of Object
// - The Object class, in the java.lang package, sits at the top of the class hierarchy tree. Every class is a descendant, direct or indirect, of the Object class. 
// - Every class you use or write inherits the instance methods of Object.
// - The methods inherited from Object are:
    - protected Object clone() throws CloneNotSupportedException
    - public boolean equals(Object obj)
    - protected void finalize() throws Throwable
    - public final Class getClass()
    - public int hashCode()
    - public String toString()

// %% [markdown] lang="en" tags=["slide"]
// ## The clone() Method
// - If a class, or one of its superclasses, implements the Cloneable interface, you can use the clone() method to create a copy from an existing object.
// - To write a clone methods on you class which overrides the one in Object,  it should be declared as
// ```java
// protected Object clone() throws CloneNotSupportedException
// //  or
// public Object clone() throws CloneNotSupportedException
// ```

// %% 
{
    aCloneableObject.clone();
}

// %% [markdown] lang="en" tags=["slide"]
// ## The equals() Method
// - The equals() method compares two objects for equality and returns true if they are equal.
// - For objects, the equals() method provided by Object tests whether the object references are equalthat is, if the objects compared are the exact same object. 

// %% 
public class Book {
    String ISBN;
    
    public String getISBN() { 
        return ISBN;
    }
    
    public boolean equals(Object obj) {
        if (obj instanceof Book)
            return ISBN.equals((Book)obj.getISBN()); 
        else
            return false;
    }
}

// %% [markdown] lang="en" tags=["slide"]
// ## The finalize() Method
// - The Object class provides a callback method, finalize(), that may be invoked on an object when it becomes garbage. 
// - Object's implementation of finalize() does nothingyou can override finalize() to do cleanup, such as freeing resources.

// %% [markdown] lang="en" tags=["slide"]
// ## The getClass() Method
// - You cannot override getClass. The getClass() method returns a Class object, which has methods you can use to get information about the class.

// %% 
void printClassName(Object obj) {
    System.out.println("The object's" + " class is " +
        obj.getClass().getSimpleName());
}


// %% [markdown] lang="en" tags=["slide"]
// ## The hashCode() Method
// - The value returned by hashCode() is the object's hash code, which is an integer value generated by a hashing algorithm.
// - If you override the equals() method, you must also override the hashCode method as well.

// %% [markdown] lang="en" tags=["slide"]
// ## The toString() Method
// - You should always consider overriding the toString()) method in your classes.
// - The Object's toString() method returns a String representation of the object.

// %% 
System.out.println(firstBook.toString());